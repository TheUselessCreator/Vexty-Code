[
    { "regex": "^\\s+", "type": null },          
    { "regex": "^VAR\\b", "type": "VAR" },       
    { "regex": "^FUNCTION\\b", "type": "FUNCTION" }, 
    { "regex": "^RETURN\\b", "type": "RETURN" },  
    { "regex": "^[a-zA-Z_][a-zA-Z0-9_]*", "type": "IDENTIFIER" },  
    { "regex": "^=", "type": "ASSIGN" },         
    { "regex": "^\\+", "type": "PLUS" },         
    { "regex": "^\\-", "type": "MINUS" },        
    { "regex": "^\\*", "type": "MULTIPLY" },     
    { "regex": "^\\/", "type": "DIVIDE" },       
    { "regex": "^\\d+", "type": "NUMBER" },      
    { "regex": "^\"[^\"]*\"", "type": "STRING" }, 
    { "regex": "^'[^']*'", "type": "STRING" },   
    { "regex": "^\\(", "type": "LPAREN" },       
    { "regex": "^\\)", "type": "RPAREN" },       
    { "regex": "^\\{", "type": "LBRACE" },       
    { "regex": "^\\}", "type": "RBRACE" },       
    { "regex": "^;", "type": "SEMICOLON" },      
    { "regex": "^,", "type": "COMMA" },          
    { "regex": "^==", "type": "EQUALITY" },      
    { "regex": "^!=", "type": "INEQUALITY" },    
    { "regex": "^&&", "type": "AND" },           
    { "regex": "^\\|\\|", "type": "OR" },        
    { "regex": "^!", "type": "NOT" }             
]
